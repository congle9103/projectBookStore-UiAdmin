import {
  Table,
  Image,
  Tag,
  Alert,
  Select,
  Space,
  Button,
  Input,
  Modal,
  Form,
  Row,
  Col,
  Checkbox,
  message,
  Popconfirm,
  Pagination,
  InputNumber,
} from "antd";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import Search from "antd/es/input/Search";
import { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import type { Product } from "../types/product.type";
import type { ICategory } from "../types/category.type";

const API_URL = `https://projectbookstore-backendapi.onrender.com/api/v1/products`;

// ========================================
// üîπ H√ÄM FETCH S·∫¢N PH·∫®M
// ========================================
const fetchProducts = async ({
  page = 1,
  limit = 5,
  keyword,
  sort_by,
  sort_type,
  cat_id,
}: {
  page?: number;
  limit?: number;
  keyword?: string;
  sort_by?: string;
  sort_type?: string;
  cat_id?: string;
}) => {
  const params: any = { page, limit };

  if (keyword) params.keyword = keyword;
  if (sort_by) params.sort_by = sort_by;
  if (sort_type) params.sort_type = sort_type;
  if (cat_id) params.cat_id = cat_id;

  const res = await axios.get(API_URL, { params });
  if (res.data?.data?.products) return res.data.data;
  return res.data.products ? res.data : res.data.data;
};

// ========================================
// üîπ H√ÄM CREATE S·∫¢N PH·∫®M
// ========================================
const createProduct = async (values: any) => {
  const payload = {
    // Kh√¥ng spread ...values tr·ª±c ti·∫øp n·∫øu mu·ªën tr√°nh g·ª≠i tr∆∞·ªùng th·ª´a/kh√¥ng c·∫ßn
    product_name: values.product_name,
    category_id: values.category_id,
    supplier: values.supplier,
    publisher: values.publisher,
    authors: values.authors
      ? values.authors.split(",").map((a: string) => a.trim())
      : [],
    pages: values.pages,
    publicationYear: values.publicationYear,
    format: values.format,
    dimensions: values.dimensions,
    weight: values.weight,
    thumbnails: values.thumbnails
      ? values.thumbnails.split(",").map((url: string) => url.trim())
      : [],
    originalPrice: values.originalPrice,
    discountPercent: values.discountPercent,
    stock: values.stock,
    slug:
      values.product_name
        ?.toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/(^-|-$)+/g, "") || "",
    description: values.description,
    isNew: values.isNew,
    isPopular: values.isPopular,
    isFlashSale: values.isFlashSale,
  };

  const response = await axios.post(API_URL, payload);
  console.log("Create Response from Backend:", response.data); // Th√™m log ƒë·ªÉ th·∫•y createdAt + updatedAt
  return response.data; // Tr·∫£ v·ªÅ data ƒë·∫ßy ƒë·ªß ƒë·ªÉ s·ª≠ d·ª•ng n·∫øu c·∫ßn
};

// ========================================
// üîπ H√ÄM UPDATE S·∫¢N PH·∫®M
// ========================================
const updateProduct = async (id: string, values: any) => {
  const payload = {
    ...values,
    authors: values.authors
      ? values.authors.split(",").map((a: string) => a.trim())
      : [],
    thumbnails: values.thumbnails
      ? values.thumbnails.split(",").map((url: string) => url.trim())
      : [],
    slug:
      values.product_name
        ?.toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/(^-|-$)+/g, "") || "",
    updatedAt: new Date().toISOString(),
  };

  return axios.put(`${API_URL}/${id}`, payload);
};

// ========================================
// üîπ COMPONENT CH√çNH
// ========================================
const Products = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const queryClient = useQueryClient();
  const [form] = Form.useForm();
  const [categories, setCategories] = useState<ICategory[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);

  // L·∫•y params t·ª´ URL
  const page = parseInt(searchParams.get("page") || "1");
  const limit = parseInt(searchParams.get("limit") || "5");
  const keyword = searchParams.get("keyword") || "";
  const sort_by = searchParams.get("sort_by") || "";
  const sort_type = searchParams.get("sort_type") || "";
  const cat_id = searchParams.get("cat_id") || "";

  // G·ªçi API React Query
  const { data, isError, error, isFetching } = useQuery({
    queryKey: ["products", page, limit, keyword, sort_by, sort_type, cat_id],
    queryFn: () =>
      fetchProducts({ page, limit, keyword, sort_by, sort_type, cat_id }),
  });

  console.log("data", data);
  

  // H√†m c·∫≠p nh·∫≠t params tr√™n URL
  const updateParams = (
    updates: Record<string, string | number | undefined>
  ) => {
    const newParams = new URLSearchParams(searchParams);
    Object.entries(updates).forEach(([key, value]) => {
      if (value === undefined || value === "") newParams.delete(key);
      else newParams.set(key, String(value));
    });
    setSearchParams(newParams);
  };

  // Fetch categories
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await axios.get(
          "https://projectbookstore-backendapi.onrender.com/api/v1/categories"
        );
        // ‚úÖ Chu·∫©n h√≥a d·ªØ li·ªáu: ch·ªâ l·∫•y m·∫£ng th·ª±c t·∫ø
        const cats = res.data?.data?.categories;

        // N·∫øu cats kh√¥ng ph·∫£i m·∫£ng, fallback r·ªóng
        setCategories(Array.isArray(cats) ? cats : []);
      } catch (err) {
        console.error("‚ùå L·ªói khi load categories:", err);
        setCategories([]);
      }
    };
    fetchCategories();
  }, []);

  // ========================================
  // üîπ L∆ØU S·∫¢N PH·∫®M (G·ªåI CREATE / UPDATE)
  // ========================================
  const handleSaveProduct = async () => {
    try {
      const values = await form.validateFields();

      if (editingProduct) {
        await updateProduct(editingProduct._id, values);
        console.log("C·∫≠p nh·∫≠t s·∫£n ph·∫©m:", values);
      } else {
        await createProduct(values);
        console.log("Th√™m s·∫£n ph·∫©m:", values);
      }

      setIsModalOpen(false);
      setEditingProduct(null);
      queryClient.invalidateQueries({ queryKey: ["products"] });
    } catch (err: any) {
      console.error("‚ùå L·ªói khi l∆∞u s·∫£n ph·∫©m:", err);
      message.error(
        err.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi l∆∞u s·∫£n ph·∫©m"
      );
    }
  };

  // Ch·ªânh s·ª≠a
  const handleEdit = (record: Product) => {
    setEditingProduct(record);
    form.setFieldsValue({
      ...record,
      authors: record.authors?.join(", "),
      thumbnails: record.thumbnails?.join(", "),
    });
    setIsModalOpen(true);
  };

  // X√≥a
  const handleDelete = async (id: string) => {
    try {
      await axios.delete(`${API_URL}/${id}`);
      message.success("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");
      queryClient.invalidateQueries({ queryKey: ["products"] });
    } catch {
      message.error("X√≥a th·∫•t b·∫°i");
    }
  };

  // ========================================
  // üîπ C·ªòT B·∫¢NG
  // ========================================
  const columns = [
    {
      title: "·∫¢nh",
      dataIndex: "thumbnails",
      key: "thumbnails",
      render: (thumbs: string[] | string) => {
        const thumb = Array.isArray(thumbs) ? thumbs[0] : thumbs;
        return (
          <Image
            src={
              thumb?.startsWith("http")
                ? thumb
                : `${import.meta.env.VITE_BACKEND_URL_STATIC}/${thumb}`
            }
            width={60}
            height={60}
            style={{ objectFit: "cover", borderRadius: 8 }}
          />
        );
      },
    },
    { title: "T√™n s·∫£n ph·∫©m", dataIndex: "product_name", key: "product_name" },
    { title: "Danh m·ª•c", dataIndex: "category_name", key: "category_name" },
    {
      title: "Gi√° g·ªëc",
      dataIndex: "originalPrice",
      key: "originalPrice",
      render: (price: number) => `${price?.toLocaleString()} ƒë`,
    },
    {
      title: "Gi·∫£m gi√°",
      dataIndex: "discountPercent",
      key: "discountPercent",
      render: (percent: number) => (
        <Tag color={percent > 0 ? "green" : "red"}>{percent}%</Tag>
      ),
    },
    {
      title: "Gi√° hi·ªán t·∫°i",
      dataIndex: "price",
      key: "price",
      render: (price: number) => `${price?.toLocaleString()} ƒë`,
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (record: Product) => (
        <Space>
          <Button type="primary" onClick={() => handleEdit(record)}>
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?"
            onConfirm={() => handleDelete(record._id)}
          >
            <Button danger>X√≥a</Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  if (isError) return <Alert type="error" message={(error as Error).message} />;

  // ========================================
  // üîπ UI
  // ========================================
  return (
    <div className="p-6">
      <div className="bg-white shadow-lg rounded-xl p-6">
        {/* B·ªô l·ªçc */}
        <div className="flex flex-wrap items-center gap-4 mb-6">
          <label className="text-lg font-semibold">Danh s√°ch s·∫£n ph·∫©m:</label>
          <Search
            placeholder="T√¨m s·∫£n ph·∫©m..."
            allowClear
            enterButton
            defaultValue={keyword}
            onSearch={(value) => updateParams({ keyword: value, page: 1 })}
            className="!w-100"
          />

          <Select
            placeholder="Th·ªÉ lo·∫°i"
            className="!w-40"
            value={cat_id || undefined}
            onChange={(value) => updateParams({ cat_id: value, page: 1 })}
            options={[
              { value: "", label: "T·∫•t c·∫£" },
              { value: "history", label: "L·ªãch s·ª≠" },
              { value: "novel", label: "VƒÉn h·ªçc" },
              { value: "comic", label: "Truy·ªán tranh" },
              { value: "children", label: "Thi·∫øu nhi" },
              { value: "skills", label: "K·ªπ nƒÉng" },
              { value: "foreign", label: "Ngo·∫°i vƒÉn" },
            ]}
          />

          <Select
            placeholder="S·∫Øp x·∫øp theo gi√°"
            className="!w-48"
            value={sort_type || undefined}
            onChange={(value) =>
              updateParams({ sort_type: value, sort_by: "price" })
            }
            options={[
              { value: "asc", label: "Gi√° th·∫•p ‚Üí cao" },
              { value: "desc", label: "Gi√° cao ‚Üí th·∫•p" },
            ]}
          />

          <Button
            type="primary"
            className="ml-auto"
            onClick={() => {
              setIsModalOpen(true);
              setEditingProduct(null);
              form.resetFields();
            }}
          >
            Th√™m s·∫£n ph·∫©m
          </Button>
        </div>

        {/* B·∫£ng */}
        <Table
          rowKey="_id"
          columns={columns}
          dataSource={data?.products}
          loading={isFetching}
          pagination={false}
        />

        {/* Ph√¢n trang */}
        <div className="mt-4 text-right">
          <Pagination
            current={page}
            total={data?.totalRecords}
            pageSize={limit}
            onChange={(p) => updateParams({ page: p })}
            showTotal={
              data?.totalRecords
                ? (total) => `T·ªïng ${total} s·∫£n ph·∫©m`
                : undefined
            }
          />
        </div>
      </div>

      {/* Modal Th√™m / S·ª≠a */}
      <Modal
        title={editingProduct ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        onOk={handleSaveProduct}
        okText="L∆∞u"
        cancelText="H·ªßy"
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            isNew: false,
            isPopular: false,
            isFlashSale: false,
          }}
        >
          <Row gutter={[16, 0]}>
            <Col span={12}>
              <Form.Item
                name="product_name"
                label="T√™n s√°ch"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p t√™n s√°ch" },
                  {
                    min: 2,
                    message: "T√™n s·∫£n ph·∫©m qu√° ng·∫Øn (t·ªëi thi·ªÉu 2 k√Ω t·ª±)",
                  },
                  { max: 255, message: "T√™n s·∫£n ph·∫©m t·ªëi ƒëa 255 k√Ω t·ª±" },
                  {
                    validator: (_, value) => {
                      if (!value) return Promise.resolve();
                      const isDuplicate = data?.products?.some(
                        (p) =>
                          p.product_name.trim().toLowerCase() ===
                            value.trim().toLowerCase() &&
                          p._id !== editingProduct?._id // b·ªè qua s·∫£n ph·∫©m ƒëang s·ª≠a
                      );
                      return isDuplicate
                        ? Promise.reject("T√™n s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i")
                        : Promise.resolve();
                    },
                  },
                ]}
              >
                <Input
                  placeholder="Nh·∫≠p t√™n s√°ch"
                  onChange={(e) => {
                    const name = e.target.value;
                    form.setFieldsValue({
                      slug: name
                        .toLowerCase()
                        .normalize("NFD")
                        .replace(/[\u0300-\u036f]/g, "")
                        .replace(/[^a-z0-9]+/g, "-")
                        .replace(/(^-|-$)+/g, ""),
                    });
                  }}
                />
              </Form.Item>

              <Form.Item
                name="slug"
                label="Slug"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p slug" },
                  {
                    pattern: /^[a-z0-9]+(?:-[a-z0-9]+)*$/,
                    message: "Slug ch·ªâ ch·ª©a ch·ªØ th∆∞·ªùng, s·ªë v√† d·∫•u g·∫°ch ngang",
                  },
                ]}
              >
                <Input placeholder="vd: vu-tru-trong-hat-cat" />
              </Form.Item>

              <Form.Item
                name="category_id"
                label="Danh m·ª•c"
                rules={[{ required: true, message: "Ch·ªçn danh m·ª•c" }]}
              >
                <Select
                  placeholder="Ch·ªçn danh m·ª•c"
                  options={categories.map((cat) => ({
                    value: cat._id,
                    label: cat.name,
                  }))}
                />
              </Form.Item>

              <Form.Item
                name="authors"
                label="T√°c gi·∫£"
                rules={[
                  { required: true, message: "Nh·∫≠p √≠t nh·∫•t 1 t√°c gi·∫£" },
                  {
                    min: 2,
                    message: "T√™n t√°c gi·∫£ qu√° ng·∫Øn (t·ªëi thi·ªÉu 2 k√Ω t·ª±)",
                  },
                  { max: 255, message: "T√™n t√°c gi·∫£ t·ªëi ƒëa 255 k√Ω t·ª±" },
                ]}
              >
                <Input placeholder="Nh·∫≠p t√™n t√°c gi·∫£, c√°ch nhau b·∫±ng d·∫•u ph·∫©y" />
              </Form.Item>

              <Form.Item
                name="publisher"
                label="Nh√† xu·∫•t b·∫£n"
                rules={[
                  { required: true, message: "Nh·∫≠p nh√† xu·∫•t b·∫£n" },
                  { min: 2, message: "T√™n qu√° ng·∫Øn" },
                  { max: 255, message: "T√™n t·ªëi ƒëa 255 k√Ω t·ª±" },
                ]}
              >
                <Input placeholder="VD: NXB Khoa h·ªçc" />
              </Form.Item>

              <Form.Item
                name="supplier"
                label="Nh√† cung c·∫•p"
                rules={[
                  { required: true, message: "Nh·∫≠p nh√† cung c·∫•p" },
                  { min: 2, message: "T√™n qu√° ng·∫Øn" },
                  { max: 255, message: "T√™n t·ªëi ƒëa 255 k√Ω t·ª±" },
                ]}
              >
                <Input placeholder="VD: Fahasa" />
              </Form.Item>

              <Form.Item
                name="description"
                label="M√¥ t·∫£"
                rules={[{ max: 5000, message: "M√¥ t·∫£ t·ªëi ƒëa 5000 k√Ω t·ª±" }]}
              >
                <Input.TextArea
                  rows={4}
                  placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ n·ªôi dung s√°ch"
                />
              </Form.Item>
            </Col>

            {/* C·ªôt ph·∫£i */}
            <Col span={12}>
              <Form.Item
                name="originalPrice"
                label="Gi√° g·ªëc (VNƒê)"
                rules={[
                  { required: true, message: "Nh·∫≠p gi√° g·ªëc" },
                  { type: "number", min: 0, message: "Gi√° ph·∫£i ‚â• 0" },
                ]}
              >
                <InputNumber min={0} style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="discountPercent"
                label="Gi·∫£m gi√° (%)"
                rules={[
                  {
                    type: "number",
                    min: 0,
                    max: 90,
                    message: "Gi·∫£m gi√° 0‚Äì90%",
                  },
                ]}
              >
                <InputNumber min={0} max={90} style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="price"
                label="Gi√° sau gi·∫£m (VNƒê)"
                rules={[{ type: "number", min: 0, message: "Gi√° ph·∫£i ‚â• 0" }]}
              >
                <InputNumber min={0} style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="stock"
                label="T·ªìn kho"
                rules={[
                  { required: true, message: "Nh·∫≠p t·ªìn kho" },
                  { type: "number", min: 0, message: "T·ªìn kho ‚â• 0" },
                ]}
              >
                <InputNumber min={0} style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="publicationYear"
                label="NƒÉm xu·∫•t b·∫£n"
                rules={[
                  {
                    required: true,
                    type: "number",
                    min: 1900,
                    max: new Date().getFullYear(),
                    message: `NƒÉm xu·∫•t b·∫£n t·ª´ 1900 ƒë·∫øn ${new Date().getFullYear()}`,
                  },
                ]}
              >
                <InputNumber style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="pages"
                label="S·ªë trang"
                rules={[
                  {
                    required: true,
                    type: "number",
                    min: 50,
                    max: 3000,
                    message: "T·ª´ 50‚Äì3000 trang",
                  },
                ]}
              >
                <InputNumber style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="format"
                label="ƒê·ªãnh d·∫°ng"
                rules={[{ required: true, message: "Ch·ªçn ƒë·ªãnh d·∫°ng h·ª£p l·ªá" }]}
              >
                <Select
                  options={[
                    { value: "B√¨a m·ªÅm", label: "B√¨a m·ªÅm" },
                    { value: "B√¨a c·ª©ng", label: "B√¨a c·ª©ng" },
                  ]}
                />
              </Form.Item>

              <Form.Item
                name="dimensions"
                label="K√≠ch th∆∞·ªõc"
                rules={[
                  {
                    pattern: /^[0-9]+x[0-9]+x[0-9]+(cm|mm)?$/,
                    message: "ƒê·ªãnh d·∫°ng: r·ªôngxcaoxd√†y (vd: 15x23x3cm)",
                  },
                ]}
              >
                <Input placeholder="15x23x3cm" />
              </Form.Item>

              <Form.Item
                name="weight"
                label="Tr·ªçng l∆∞·ª£ng (gram)"
                rules={[
                  {
                    type: "number",
                    min: 100,
                    max: 5000,
                    message: "100‚Äì5000 gram",
                  },
                ]}
              >
                <InputNumber style={{ width: "100%" }} />
              </Form.Item>

              <Form.Item
                name="thumbnails"
                label="·∫¢nh (URL)"
                rules={[
                  {
                    validator: (_, value) => {
                      if (!value) return Promise.resolve();
                      const urls = value.split(",").map((u) => u.trim());
                      const isValid = urls.every((url) =>
                        /^(http|https):\/\/[^ "]+$/.test(url)
                      );
                      return isValid
                        ? Promise.resolve()
                        : Promise.reject(
                            "M·ªói ·∫£nh ph·∫£i l√† URL h·ª£p l·ªá (http/https)"
                          );
                    },
                  },
                ]}
              >
                <Input placeholder="Nh·∫≠p ho·∫∑c d√°n link ·∫£nh (nhi·ªÅu link c√°ch nhau b·∫±ng d·∫•u ph·∫©y)" />
              </Form.Item>

              <Row gutter={8}>
                <Col span={8}>
                  <Form.Item name="isNew" valuePropName="checked">
                    <Checkbox>M·ªõi</Checkbox>
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item name="isPopular" valuePropName="checked">
                    <Checkbox>Ph·ªï bi·∫øn</Checkbox>
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item name="isFlashSale" valuePropName="checked">
                    <Checkbox>Flash Sale</Checkbox>
                  </Form.Item>
                </Col>
              </Row>
            </Col>
          </Row>
        </Form>
      </Modal>
    </div>
  );
};

export default Products;
